import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as a,o as t}from"./app-DShzV3oA.js";const l={};function e(p,i){return t(),n("div",null,i[0]||(i[0]=[a(`<h1 id="指针-type" tabindex="-1"><a class="header-anchor" href="#指针-type"><span>指针 *type</span></a></h1><p>指针指向某个特定数据类型的对象，比如以下这些都是指针：</p><ul><li>*int</li><li>*[]int</li><li>*map[string]string</li><li>...</li></ul><p>指针必须绑定一个数据类型，所以不能说 * 就代表一个指针，*int 这才是一个完整的指针，同时表达了是指向 int 类型的指针，再例如 *string 是指向 string 类型的指针；就跟切片一样必须带数据类型一样： []int, []string, []map[string]string ...</p><p>指针本质上也是一种数据类型（而且是<strong>引用类型</strong>），它也可以“被指”，也就说有 **int ***int ****int...</p><p>指针可以指向任意变量，但是不能指向常量</p><ul><li>&amp;变量名 返回 指针 （此时用 fmt.println 可视化，观测到的是一个内存地址 0x......）</li><li>*指针 返回 变量的值</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	a</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	p1</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 指针实际的值即内存地址</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;address in memory: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;rune type value in memory: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 取内存地址存放的值，即为 &#39;1&#39; 这个 rune 的 ascii 码 即 49</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	b</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;1&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	p2</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">b</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;string type value in memory: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 结果就是 1，string 存的就是本来的数据</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    c</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    p3</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">c</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; int type value in memory: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 结果就是 1， int 存的就是本来的数据</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h2><p>Go 的指针默认不支持运算，不像 C 放开了这个功能</p>`,11)]))}const r=s(l,[["render",e]]),d=JSON.parse('{"path":"/notes/golang/%E4%BB%A3%E7%A0%81%E7%89%B9%E6%80%A7/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E6%8C%87%E9%92%88.html","title":"指针 *type","lang":"zh-CN","frontmatter":{"date":"2022-01-09T00:00:00.000Z","category":"Go","tag":["基本数据类型"],"description":"指针 *type 指针指向某个特定数据类型的对象，比如以下这些都是指针： *int *[]int *map[string]string ... 指针必须绑定一个数据类型，所以不能说 * 就代表一个指针，*int 这才是一个完整的指针，同时表达了是指向 int 类型的指针，再例如 *string 是指向 string 类型的指针；就跟切片一样必须带数据类...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"指针 *type\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-02T07:54:44.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://xiangcheng.site/notes/golang/%E4%BB%A3%E7%A0%81%E7%89%B9%E6%80%A7/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E6%8C%87%E9%92%88.html"}],["meta",{"property":"og:site_name","content":"大橙的运维宝典"}],["meta",{"property":"og:title","content":"指针 *type"}],["meta",{"property":"og:description","content":"指针 *type 指针指向某个特定数据类型的对象，比如以下这些都是指针： *int *[]int *map[string]string ... 指针必须绑定一个数据类型，所以不能说 * 就代表一个指针，*int 这才是一个完整的指针，同时表达了是指向 int 类型的指针，再例如 *string 是指向 string 类型的指针；就跟切片一样必须带数据类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-02T07:54:44.000Z"}],["meta",{"property":"article:tag","content":"基本数据类型"}],["meta",{"property":"article:published_time","content":"2022-01-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-02T07:54:44.000Z"}]]},"git":{"createdTime":1732214708000,"updatedTime":1735804484000,"contributors":[{"name":"daCheng","username":"daCheng","email":"xiangxiaoc@outlook.com","commits":2,"url":"https://github.com/daCheng"}]},"readingTime":{"minutes":1.16,"words":348},"filePathRelative":"notes/golang/代码特性/基本数据类型/指针.md","excerpt":"\\n<p>指针指向某个特定数据类型的对象，比如以下这些都是指针：</p>\\n<ul>\\n<li>*int</li>\\n<li>*[]int</li>\\n<li>*map[string]string</li>\\n<li>...</li>\\n</ul>\\n<p>指针必须绑定一个数据类型，所以不能说 * 就代表一个指针，*int 这才是一个完整的指针，同时表达了是指向 int 类型的指针，再例如 *string 是指向 string 类型的指针；就跟切片一样必须带数据类型一样： []int, []string, []map[string]string ...</p>\\n<p>指针本质上也是一种数据类型（而且是<strong>引用类型</strong>），它也可以“被指”，也就说有 **int ***int ****int...</p>","autoDesc":true}');export{r as comp,d as data};
