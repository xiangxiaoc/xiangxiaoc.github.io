import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as t,o as n}from"./app-GQSRkUBP.js";const e={};function o(p,i){return n(),a("div",null,i[0]||(i[0]=[t(`<h1 id="go-工程中的实践" tabindex="-1"><a class="header-anchor" href="#go-工程中的实践"><span>Go 工程中的实践</span></a></h1><p>Go 项目流行的目录布局</p><p><a href="https://github.com/golang-standards/project-layout/blob/master/README_zh.md" target="_blank" rel="noopener noreferrer">https://github.com/golang-standards/project-layout/blob/master/README_zh.md</a></p><p>一个 Go 的工程当然是一个文件夹里面放了一堆 .go 的文件。</p><p>如果在工程的根目录执行 <code>go mod init</code> 生成 go.mod 文件，那就是把 <strong>整个工程定义为一个 Go 模块（Module）</strong>。</p><p>工程里面的每一个子目录下只要放了 go.mod 就又定义了一个模块，一个 Go 工程里可以有多个模块</p><p>工程跟目录的 go.mod</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">module</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> github</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">com</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">xiangxiaoc</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">golearn</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">go</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.17</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">require</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> github</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">com</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">armstrongli</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">go</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bmi</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> v0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">replace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	github</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">com</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">armstrongli</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">go</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bmi</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> v0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">my_bmi</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义了模块，也就给模块里的 .go 文件里的 import 提供了支持，上述 mod 文件里还允许将某个模块实际指向本地的某个模块目录（这样就可以在自己的工程里，先拉下来依赖的源码，再改写源码）</p><p>在模块目录及子目录内使用 go get 就能 add 第三方模块（系统未安装则自动 download），在模块范围内的任意 .go 文件都能 import 这些门模块里的软件包。除非这个 go 工程内的某一级子目录内又有一个 go.mod 文件，则它将它这个目录及它的字母定义为一个新模块，而且还不继承上层目录的 go.mod 内容，是个完全独立的模块。</p><h2 id="go-package" tabindex="-1"><a class="header-anchor" href="#go-package"><span>Go package</span></a></h2><p>包是包，模块是模块。一个模块里没有可以有多个包，包放在模块下的一个目录也行，目录的子目录也行，包括模块的根目录也行。</p><p>反正只要每个 .go 文件里都申明了自己是属于哪个包的，就放在同一文件夹里就好了，最好文件夹名就是包名，这样 import 一堆路径（模块地址/一级/一级的/包路径）的时候，最后那个目录就是包名。</p><h3 id="导包思考" tabindex="-1"><a class="header-anchor" href="#导包思考"><span>导包思考</span></a></h3><p>这个问题不思考清楚，写代码无从下手</p><p>两种情况：</p><p>内层包需要导入外层包</p><ol><li></li></ol><p>外层包定义接口：<a href="https://github.com/golang/go/blob/master/src/encoding/encoding.go" target="_blank" rel="noopener noreferrer">https://github.com/golang/go/blob/master/src/encoding/encoding.go</a></p>`,19)]))}const r=s(e,[["render",o]]),d=JSON.parse('{"path":"/notes/golang/%E5%B7%A5%E7%A8%8B%E5%8C%96/Go%20%E5%B7%A5%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%AE%9E%E8%B7%B5.html","title":"Go 工程中的实践","lang":"zh-CN","frontmatter":{"date":"2022-01-09T00:00:00.000Z","category":"Go","tag":["Go软件包"],"description":"Go 工程中的实践 Go 项目流行的目录布局 https://github.com/golang-standards/project-layout/blob/master/README_zh.md 一个 Go 的工程当然是一个文件夹里面放了一堆 .go 的文件。 如果在工程的根目录执行 go mod init 生成 go.mod 文件，那就是把 整个工...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 工程中的实践\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-02T07:54:44.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://xiangcheng.site/notes/golang/%E5%B7%A5%E7%A8%8B%E5%8C%96/Go%20%E5%B7%A5%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%AE%9E%E8%B7%B5.html"}],["meta",{"property":"og:site_name","content":"大橙的运维宝典"}],["meta",{"property":"og:title","content":"Go 工程中的实践"}],["meta",{"property":"og:description","content":"Go 工程中的实践 Go 项目流行的目录布局 https://github.com/golang-standards/project-layout/blob/master/README_zh.md 一个 Go 的工程当然是一个文件夹里面放了一堆 .go 的文件。 如果在工程的根目录执行 go mod init 生成 go.mod 文件，那就是把 整个工..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-02T07:54:44.000Z"}],["meta",{"property":"article:tag","content":"Go软件包"}],["meta",{"property":"article:published_time","content":"2022-01-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-02T07:54:44.000Z"}]]},"git":{"createdTime":1732214708000,"updatedTime":1735804484000,"contributors":[{"name":"daCheng","username":"daCheng","email":"xiangxiaoc@outlook.com","commits":3,"url":"https://github.com/daCheng"}]},"readingTime":{"minutes":1.79,"words":537},"filePathRelative":"notes/golang/工程化/Go 工程中的实践.md","excerpt":"\\n<p>Go 项目流行的目录布局</p>\\n<p><a href=\\"https://github.com/golang-standards/project-layout/blob/master/README_zh.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/golang-standards/project-layout/blob/master/README_zh.md</a></p>\\n<p>一个 Go 的工程当然是一个文件夹里面放了一堆 .go 的文件。</p>\\n<p>如果在工程的根目录执行 <code>go mod init</code> 生成 go.mod 文件，那就是把 <strong>整个工程定义为一个 Go 模块（Module）</strong>。</p>","autoDesc":true}');export{r as comp,d as data};
