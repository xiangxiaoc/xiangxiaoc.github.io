import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as l}from"./app-D49licMt.js";const e={};function t(p,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="利用-gitlab-ci-的内置变量-自动生成镜像-tag" tabindex="-1"><a class="header-anchor" href="#利用-gitlab-ci-的内置变量-自动生成镜像-tag"><span>利用 gitlab-ci 的内置变量，自动生成镜像 tag</span></a></h1><p>gitlab-ci 给我们提供了以下内置变量：</p><ul><li>CI_COMMIT_TIMESTAMP： 提交时间戳，格式为：2022-01-09T08:06:04.000Z</li><li>CI_COMMIT_BRANCH： 分支名称</li><li>CI_COMMIT_SHORT_SHA： 提交哈希值</li></ul><p>每次跑 CI 流水线时，这些值都是会动态生成的，利用这几个变量，我就有了以下思路：</p><ol><li>基于 <code>CI_COMMIT_TIMESTAMP</code> 处理得到 20240101-120000 格式的时间戳文本。</li><li>再组合 <code>CI_COMMIT_BRANCH</code> <code>CI_COMMIT_SHORT_SHA</code> 得到 <code>xxx.com/project/app-xxx: dev_12345678_commitAt20240101-120000_buildAt20240101-130000</code> 完整镜像地址</li></ol><p>具体实现的脚本参见下方 <code>default.before_script</code> 代码块，每个流水线 job 执行前，会得到 tag 这个变量，后续还可以用给 cd 阶段中的各个 job</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 相关变量值，根据实际设置</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">variables</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   HARBOR_URL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;xxx&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   HARBOR_PROJECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;xxx&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   IMAGE_NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">app-xxx</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   IMAGE_FULL_NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${HARBOR_URL}/\${HARBOR_PROJECT}/\${IMAGE_NAME}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   PUSH_CREDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;123456&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  before_script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">export commit_time=$(date -d \${CI_COMMIT_TIMESTAMP} +&#39;%Y%m%d-%H%M%S&#39;)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">export build_time=$(date -d \${CI_PIPELINE_CREATED_AT} +&#39;%Y%m%d-%H%M%S&#39;)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">export tag=\${IMAGE_TAG_PREFIX}\${CI_COMMIT_BRANCH}_\${CI_COMMIT_SHORT_SHA}_commitAt\${commit_time}_buildAt\${build_time}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">.构建镜像</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  stage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">CI</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tag=\${tag}_\${DEPLOY_ENV}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">podman build</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      -f .env.\${DEPLOY_ENV}.Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      --tag \${IMAGE_FULL_NAME}:\${tag}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      .</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">podman push --creds \${PUSH_CREDS} \${IMAGE_FULL_NAME}:\${tag}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">echo &quot;镜像构建完成 =&gt; \${IMAGE_FULL_NAME}:\${tag}&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">podman image rm \${IMAGE_FULL_NAME}:\${tag}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">构建sit环境镜像</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  extends</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.构建镜像</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  only</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    refs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">sit</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  variables</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    DEPLOY_ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">sit</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  environment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${DEPLOY_ENV}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">https://sit.xxx.com/ops-platform/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">构建prod环境镜像</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  extends</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.构建镜像</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  only</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    refs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">master</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  variables</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    DEPLOY_ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">prod</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  environment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${DEPLOY_ENV}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">https://prod.xxx.com/ops-platform/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)]))}const d=i(e,[["render",t]]),r=JSON.parse('{"path":"/notes/CICD/Gitlab%20CI/%E5%88%A9%E7%94%A8%20gitlab-ci%20%E7%9A%84%E5%86%85%E7%BD%AE%E5%8F%98%E9%87%8F%EF%BC%8C%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E9%95%9C%E5%83%8F%20tag.html","title":"利用 gitlab-ci 的内置变量，自动生成镜像 tag","lang":"zh-CN","frontmatter":{"date":"2022-01-09T00:00:00.000Z","category":"gitlab-ci","tag":["cicd"],"description":"利用 gitlab-ci 的内置变量，自动生成镜像 tag gitlab-ci 给我们提供了以下内置变量： CI_COMMIT_TIMESTAMP： 提交时间戳，格式为：2022-01-09T08:06:04.000Z CI_COMMIT_BRANCH： 分支名称 CI_COMMIT_SHORT_SHA： 提交哈希值 每次跑 CI 流水线时，这些值都是...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"利用 gitlab-ci 的内置变量，自动生成镜像 tag\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-02T07:54:44.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://xiangcheng.site/notes/CICD/Gitlab%20CI/%E5%88%A9%E7%94%A8%20gitlab-ci%20%E7%9A%84%E5%86%85%E7%BD%AE%E5%8F%98%E9%87%8F%EF%BC%8C%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E9%95%9C%E5%83%8F%20tag.html"}],["meta",{"property":"og:site_name","content":"大橙的运维宝典"}],["meta",{"property":"og:title","content":"利用 gitlab-ci 的内置变量，自动生成镜像 tag"}],["meta",{"property":"og:description","content":"利用 gitlab-ci 的内置变量，自动生成镜像 tag gitlab-ci 给我们提供了以下内置变量： CI_COMMIT_TIMESTAMP： 提交时间戳，格式为：2022-01-09T08:06:04.000Z CI_COMMIT_BRANCH： 分支名称 CI_COMMIT_SHORT_SHA： 提交哈希值 每次跑 CI 流水线时，这些值都是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-02T07:54:44.000Z"}],["meta",{"property":"article:tag","content":"cicd"}],["meta",{"property":"article:published_time","content":"2022-01-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-02T07:54:44.000Z"}]]},"git":{"createdTime":1732214708000,"updatedTime":1735804484000,"contributors":[{"name":"daCheng","username":"daCheng","email":"xiangxiaoc@outlook.com","commits":3,"url":"https://github.com/daCheng"}]},"readingTime":{"minutes":1.13,"words":338},"filePathRelative":"notes/CICD/Gitlab CI/利用 gitlab-ci 的内置变量，自动生成镜像 tag.md","excerpt":"\\n<p>gitlab-ci 给我们提供了以下内置变量：</p>\\n<ul>\\n<li>CI_COMMIT_TIMESTAMP： 提交时间戳，格式为：2022-01-09T08:06:04.000Z</li>\\n<li>CI_COMMIT_BRANCH： 分支名称</li>\\n<li>CI_COMMIT_SHORT_SHA： 提交哈希值</li>\\n</ul>\\n<p>每次跑 CI 流水线时，这些值都是会动态生成的，利用这几个变量，我就有了以下思路：</p>\\n<ol>\\n<li>基于 <code>CI_COMMIT_TIMESTAMP</code> 处理得到 20240101-120000 格式的时间戳文本。</li>\\n<li>再组合 <code>CI_COMMIT_BRANCH</code> <code>CI_COMMIT_SHORT_SHA</code> 得到 <code>xxx.com/project/app-xxx: dev_12345678_commitAt20240101-120000_buildAt20240101-130000</code> 完整镜像地址</li>\\n</ol>","autoDesc":true}');export{d as comp,r as data};
